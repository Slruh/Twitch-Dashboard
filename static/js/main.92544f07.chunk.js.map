{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CHAT_SECTIONS_TO_SHOW","key","display","StyledMenu","withStyles","paper","border","props","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","lexographicSort","a","b","localeCompare","useStyles","makeStyles","theme","toolbar","justifyContent","heading","fontSize","typography","pxToRem","fontWeight","fontWeightBold","App","useState","anchorEl","setAnchorEl","channel","setChannel","workingChannel","setWorkingChannel","Set","lastChatters","setLastChatters","autoRefreshEnabled","setAutoRefreshEnabled","handleMenuClick","event","target","useQuery","chatters","lastChattersSet","Object","keys","reduce","lastChattersFlattened","section","forEach","chatter","add","flattenAndPurgeLastChatters","data","fetchJsonp","toLowerCase","then","res","json","console","log","enabled","refetchInterval","isLoading","refetch","mapToListItem","account","isNew","ListItem","ListItemIcon","color","ListItemText","primary","renderListSection","inSection","length","partitions","size","has","newViewers","currentViewers","isLargeViewersSection","sort","newViewersMapped","map","currentViewersMapped","ListSubheader","style","backgroundColor","count","chatter_count","classes","className","AppBar","position","Toolbar","Typography","variant","IconButton","edge","aria-label","aria-controls","aria-haspopup","onClick","id","keepMounted","open","Boolean","onClose","MenuItem","FormControlLabel","control","Switch","checked","disabled","onChange","name","label","Divider","LinearProgress","Grid","container","alignItems","justify","spacing","padding","item","xs","Accordion","defaultExpanded","AccordionSummary","expandIcon","AccordionDetails","flexDirection","TextField","fullWidth","onBlur","value","align","marginTop","List","dense","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92544f07.chunk.js","sourcesContent":["import {\n  AppBar,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListSubheader,\n  makeStyles,\n  Switch,\n  TextField,\n  Toolbar,\n  Typography,\n  Menu,\n  MenuItem,\n  withStyles,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport FiberNewIcon from \"@material-ui/icons/FiberNew\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport fetchJsonp from \"fetch-jsonp\";\nimport \"./App.css\";\n\nconst REFRESH_INTERVAL_IN_MILLIS = 20 * 1000;\n\nconst CHAT_SECTIONS_TO_SHOW = {\n  broadcaster: {\n    key: \"broadcaster\",\n    display: \"Broadcaster\",\n  },\n  moderators: {\n    key: \"moderators\",\n    display: \"Moderators\",\n  },\n  vips: {\n    key: \"vips\",\n    display: \"VIPs\",\n  },\n  viewers: {\n    key: \"viewers\",\n    display: \"Viewers\",\n  },\n};\n\nconst StyledMenu = withStyles({\n  paper: {\n    border: \"1px solid #d3d4d5\",\n  },\n})((props) => (\n  <Menu\n    elevation={0}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: \"bottom\",\n      horizontal: \"center\",\n    }}\n    transformOrigin={{\n      vertical: \"top\",\n      horizontal: \"center\",\n    }}\n    {...props}\n  />\n));\n\nconst lexographicSort = (a, b) => a.localeCompare(b);\n\nconst menuId = \"app-settings\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n}));\n\nfunction App() {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [channel, setChannel] = useState(\"LindseyRooney\");\n  const [workingChannel, setWorkingChannel] = useState(\"LindseyRooney\");\n  const [lastChatters, setLastChatters] = useState(new Set());\n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);\n\n  const handleMenuClick = (event) => {\n    if (anchorEl === null) {\n      setAnchorEl(event.target);\n    } else {\n      setAnchorEl(null);\n    }\n  };\n\n  const flattenAndPurgeLastChatters = (chatters = {}) => {\n    const lastChattersSet = Object.keys(chatters).reduce(\n      (lastChattersFlattened, section) => {\n        const chattersInSection = chatters[section] || [];\n        chattersInSection.forEach((chatter) => {\n          lastChattersFlattened.add(chatter);\n        });\n        return lastChattersFlattened;\n      },\n      new Set()\n    );\n    setLastChatters(lastChattersSet);\n  };\n\n  const { data, isLoading, refetch } = useQuery(\n    [\"chatters\", channel],\n    () => {\n      flattenAndPurgeLastChatters(data ? data.chatters : {});\n      return fetchJsonp(\n        `https://tmi.twitch.tv/group/user/${channel.toLowerCase()}/chatters`\n      )\n        .then((res) => {\n          return res.json();\n        })\n        .then((json) => {\n          console.log(\"JSON\", json);\n          return json.data;\n        });\n    },\n    {\n      enabled: channel && channel !== \"\" && autoRefreshEnabled,\n      refetchInterval: REFRESH_INTERVAL_IN_MILLIS,\n    }\n  );\n\n  const commitChannelChange = () => {\n    setChannel(workingChannel);\n    setLastChatters(new Set());\n  };\n\n  const toggleAutoRefresh = () => {\n    setAutoRefreshEnabled(!autoRefreshEnabled);\n  };\n\n  const onTwitchChannelChange = (event) => {\n    setWorkingChannel(event.target.value);\n  };\n\n  const mapToListItem = (account, isNew) => {\n    return (\n      <ListItem key={account}>\n        {isNew && (\n          <ListItemIcon>\n            <FiberNewIcon color=\"primary\" />\n          </ListItemIcon>\n        )}\n        <ListItemText primary={account} />\n      </ListItem>\n    );\n  };\n\n  const renderListSection = ({ key, display }) => {\n    if (!data || !data.chatters) {\n      return null;\n    }\n\n    const inSection = data.chatters[key] || [];\n    if (inSection.length === 0) {\n      return null;\n    }\n\n    const { newViewers, currentViewers } = inSection.reduce(\n      (partitions, account) => {\n        const isNew = lastChatters.size > 0 && !lastChatters.has(account);\n\n        if (isNew) {\n          return {\n            ...partitions,\n            newViewers: [...partitions.newViewers, account],\n          };\n        } else {\n          return {\n            ...partitions,\n            currentViewers: [...partitions.currentViewers, account],\n          };\n        }\n      },\n      {\n        newViewers: [],\n        currentViewers: [],\n      }\n    );\n\n    const isLargeViewersSection =\n      key === \"viewers\" && currentViewers.length > 100;\n\n    // Hide empty sections\n    if (\n      newViewers.length === 0 &&\n      (currentViewers.length === 0 || isLargeViewersSection)\n    ) {\n      return null;\n    }\n\n    newViewers.sort(lexographicSort);\n    currentViewers.sort(lexographicSort);\n\n    const newViewersMapped = newViewers.map((account) =>\n      mapToListItem(account, true)\n    );\n    const currentViewersMapped = !isLargeViewersSection\n      ? currentViewers.map((account) => mapToListItem(account, false))\n      : [];\n\n    return [\n      <ListSubheader key={display} style={{ backgroundColor: \"white\" }}>\n        {display}\n      </ListSubheader>,\n      ...newViewersMapped,\n      ...currentViewersMapped,\n    ];\n  };\n\n  const count = data ? data.chatter_count : \"?\";\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <div className=\"TwitchChannel\">\n        <AppBar position=\"static\">\n          <Toolbar className={classes.toolbar}>\n            <Typography variant=\"h6\">Twitch Dashboard</Typography>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"settings\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleMenuClick}\n              color=\"inherit\"\n            >\n              <SettingsIcon />\n            </IconButton>\n            <StyledMenu\n              id=\"settings-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleMenuClick}\n            >\n              <MenuItem>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={autoRefreshEnabled}\n                      disabled={!channel}\n                      onChange={toggleAutoRefresh}\n                      name=\"autoRefresh\"\n                      color=\"primary\"\n                    />\n                  }\n                  label={`Auto refresh ${\n                    autoRefreshEnabled ? \"enabled\" : \"disabled\"\n                  }`}\n                />\n              </MenuItem>\n              <Divider />\n              <MenuItem disabled={!channel} onClick={refetch}>\n                <ListItemIcon>\n                  <RefreshIcon fontSize=\"small\" />\n                </ListItemIcon>\n                <ListItemText primary=\"Refresh Now\" />\n              </MenuItem>\n            </StyledMenu>\n          </Toolbar>\n          { isLoading && <LinearProgress variant=\"query\" />}\n        </AppBar>\n        <Grid\n          container\n          alignItems=\"center\"\n          justify=\"center\"\n          spacing={1}\n          style={{ padding: \"10px\" }}\n        >\n          <Grid item xs={12}>\n            <Accordion defaultExpanded>\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography variant=\"h6\">\n                  {channel} Channel Members ({count})\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails style={{display: 'flex', flexDirection: 'column'}}>\n                <TextField\n                  fullWidth\n                  label=\"Your Twitch Channel\"\n                  onBlur={commitChannelChange}\n                  onChange={onTwitchChannelChange}\n                  value={workingChannel}\n                  variant=\"outlined\"\n                />\n                <Typography align=\"center\" variant=\"caption\" style={{marginTop: \"15px\"}}>\n                  If you have over 100 viewers, only new viewers will be shown. \n                </Typography>\n              </AccordionDetails>\n            </Accordion>\n          </Grid>\n          <Grid item xs={12}>\n            <List dense>\n              {renderListSection(CHAT_SECTIONS_TO_SHOW[\"viewers\"])}\n              {renderListSection(CHAT_SECTIONS_TO_SHOW[\"vips\"])}\n              {renderListSection(CHAT_SECTIONS_TO_SHOW[\"moderators\"])}\n            </List>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}