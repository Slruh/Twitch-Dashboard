{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CHAT_SECTIONS_TO_SHOW","key","display","lexographicSort","a","b","localeCompare","App","useState","channel","setChannel","workingChannel","setWorkingChannel","Set","lastChatters","setLastChatters","autoRefreshEnabled","setAutoRefreshEnabled","useQuery","chatters","lastChattersSet","Object","keys","reduce","lastChattersFlattened","section","forEach","chatter","add","flattenAndPurgeLastChatters","data","fetchJsonp","toLowerCase","then","res","json","console","log","enabled","refetchInterval","refetch","mapToListItem","account","isNew","ListItem","ListItemIcon","ListItemText","primary","renderListSection","inSection","length","partitions","size","has","newViewers","currentViewers","isLargeViewersSection","sort","newViewersMapped","map","currentViewersMapped","ListSubheader","style","backgroundColor","count","chatter_count","className","AppBar","position","Toolbar","Typography","variant","Grid","container","alignItems","justify","spacing","marginTop","padding","item","xs","TextField","fullWidth","label","onBlur","onChange","event","target","value","FormControlLabel","control","Switch","checked","disabled","name","color","justifyContent","Button","onClick","startIcon","Divider","List","dense","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27fa2396.chunk.js","sourcesContent":["import { AppBar, Button, Divider, FormControlLabel, Grid, List, ListItem, ListItemIcon, ListItemText, ListSubheader, Switch, TextField, Toolbar, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport fetchJsonp from 'fetch-jsonp';\nimport './App.css';\n\nconst REFRESH_INTERVAL_IN_MILLIS = 20 * 1000;\n\nconst CHAT_SECTIONS_TO_SHOW = {\n  broadcaster: {\n    key: \"broadcaster\",\n    display: \"Broadcaster\"\n  },\n  moderators: {\n    key: \"moderators\",\n    display: \"Moderators\"\n  },\n  vips: {\n    key: \"vips\",\n    display: \"VIPs\"\n  }, \n  viewers: {\n    key: \"viewers\", \n    display: \"Viewers\"\n  }\n};\n\nconst lexographicSort = (a, b) => a.localeCompare(b);\n  \nfunction App() {\n  const [channel, setChannel] = useState('LindseyRooney'); \n  const [ workingChannel, setWorkingChannel] = useState('LindseyRooney');\n  const [ lastChatters, setLastChatters ] = useState(new Set()); \n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);\n\n  const flattenAndPurgeLastChatters = (chatters = {}) => {\n    const lastChattersSet = Object.keys(chatters).reduce((lastChattersFlattened, section) => {\n      const chattersInSection = chatters[section] || [];\n      chattersInSection.forEach((chatter) => {\n        lastChattersFlattened.add(chatter);\n      });\n      return lastChattersFlattened;\n    }, new Set());\n    setLastChatters(lastChattersSet);\n  }\n  \n  const { data, refetch } = useQuery(['chatters', channel], () => {\n    flattenAndPurgeLastChatters(data ? data.chatters : {});\n    return fetchJsonp(`https://tmi.twitch.tv/group/user/${channel.toLowerCase()}/chatters`).then(res => {\n      return res.json();\n    }).then((json) => {\n      console.log('JSON', json);\n      return json.data;\n    });\n  }, {\n    enabled: channel && channel !== '' && autoRefreshEnabled,\n    refetchInterval: REFRESH_INTERVAL_IN_MILLIS,\n  });\n\n  const commitChannelChange = () => {\n    setChannel(workingChannel);\n    setLastChatters(new Set());\n  }\n\n  const toggleAutoRefresh = () => {\n    setAutoRefreshEnabled(!autoRefreshEnabled);\n  }\n\n  const onTwitchChannelChange = (event) => {\n    setWorkingChannel(event.target.value);\n  }\n\n  const mapToListItem = (account, isNew) => {\n    return (\n      <ListItem key={account}>\n          {\n            isNew && (\n              <ListItemIcon>\n                <FiberNewIcon />\n              </ListItemIcon>\n            )\n          }\n          <ListItemText\n            primary={account}\n          />\n      </ListItem>\n    );\n  }\n\n  const renderListSection = ({key, display}) => {\n    if (!data || !data.chatters) {\n      return null;\n    }\n\n    const inSection = data.chatters[key] || [];\n    if (inSection.length === 0) {\n      return null;\n    }\n\n    const {newViewers, currentViewers} = inSection.reduce((partitions, account) => {\n      const isNew = lastChatters.size > 0 && !lastChatters.has(account);\n\n      if (isNew) {\n        return {\n          ...partitions,\n          newViewers: [...partitions.newViewers, account]\n        }\n      } else {\n        return {\n          ...partitions,\n          currentViewers: [...partitions.currentViewers, account]\n        }\n      }\n    }, {\n      newViewers: [],\n      currentViewers: []\n    });\n\n    const isLargeViewersSection = key === \"viewers\" && currentViewers.length > 100;\n\n    // Hide empty sections\n    if (newViewers.length === 0  && (currentViewers.length === 0 || isLargeViewersSection)) {\n      return null;\n    }\n\n    newViewers.sort(lexographicSort);\n    currentViewers.sort(lexographicSort);\n\n    const newViewersMapped = newViewers.map((account) => mapToListItem(account, true));\n    const currentViewersMapped = !isLargeViewersSection ? \n      currentViewers.map((account) => mapToListItem(account, false)) :\n      [];\n\n    return [\n      (<ListSubheader key={display} style={{backgroundColor: \"white\"}}>{display}</ListSubheader>),\n      ...newViewersMapped,\n      ...currentViewersMapped\n    ]\n  }\n\n  const count = data ? data.chatter_count : \"?\"\n\n  return (\n    <div className=\"App\">\n      <div className=\"TwitchChannel\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Twitch Dashboard\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid\n          container\n          alignItems=\"center\"\n          justify=\"center\"\n          spacing={1}\n          style={{marginTop: \"10px\", padding: \"10px\"}}\n        >\n          <Grid item xs={12}>\n            <TextField \n              fullWidth \n              label=\"Twitch Channel\" \n              onBlur={commitChannelChange}\n              onChange={onTwitchChannelChange}\n              value={workingChannel} \n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={8}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={autoRefreshEnabled}\n                  disabled={!channel}\n                  onChange={toggleAutoRefresh}\n                  name=\"autoRefresh\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Auto refresh enabled\"\n            />\n          </Grid>\n          <Grid item xs={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n            <Button\n              disabled={!channel}\n              onClick={refetch}\n              variant=\"contained\"\n              color=\"default\"\n              startIcon={<RefreshIcon />}\n            >\n              Refresh Now\n            </Button>\n          </Grid>\n          <Grid item xs={12}><Divider /></Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">\n              Channel Members ({count})\n            </Typography>\n            <Typography variant=\"subtitle2\">\n              If you have over 100 viewers, only new viewers will be shown. All new users will be shown.\n            </Typography>\n          </Grid>\n          <Grid item xs={12}><Divider /></Grid>\n          <Grid item xs={12}>\n            <List dense>\n              {renderListSection(CHAT_SECTIONS_TO_SHOW['viewers'])}\n              {renderListSection(CHAT_SECTIONS_TO_SHOW['vips'])}\n              {renderListSection(CHAT_SECTIONS_TO_SHOW['moderators'])}\n            </List>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}