{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CHAT_SECTIONS_TO_SHOW","key","display","lexographicSort","a","b","localeCompare","App","useState","channel","setChannel","lastChatters","setLastChatters","autoRefreshEnabled","setAutoRefreshEnabled","useQuery","console","log","chatters","fetchJsonp","toLowerCase","then","res","json","data","enabled","refetchInterval","status","refetch","error","renderListSection","inSection","length","lastInSectionMap","reduce","dictionary","account","sort","listItems","map","isNew","ListItem","ListItemIcon","ListItemText","primary","ListSubheader","className","AppBar","position","Toolbar","Typography","variant","Grid","container","alignItems","justify","spacing","style","marginTop","padding","item","xs","TextField","fullWidth","label","onBlur","event","target","value","Divider","FormControlLabel","control","Switch","checked","disabled","onChange","name","color","Button","onClick","startIcon","List","dense","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eb0c4a4.chunk.js","sourcesContent":["import { AppBar, Button, Divider, FormControlLabel, Grid, List, ListItem, ListItemIcon, ListItemText, ListSubheader, Switch, TextField, Toolbar, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport fetchJsonp from 'fetch-jsonp';\nimport './App.css';\n\nconst REFRESH_INTERVAL_IN_MILLIS = 20 * 1000;\n\nconst CHAT_SECTIONS_TO_SHOW = {\n  broadcaster: {\n    key: \"broadcaster\",\n    display: \"You\"\n  },\n  moderators: {\n    key: \"moderators\",\n    display: \"Moderators\"\n  },\n  vips: {\n    key: \"vips\",\n    display: \"VIPs\"\n  }, \n  chatters: {\n    key: \"chatters\", \n    display: null\n  }\n};\n\nconst lexographicSort = (a, b) => a.localeCompare(b);\n  \nfunction App() {\n  const [channel, setChannel] = useState('LindseyRooney'); \n  const [ lastChatters, setLastChatters ] = useState({}); \n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);\n  \n  const { status, data: chatters, error, refetch } = useQuery(['chatters', channel], () => {\n    console.log('Polling');\n    setLastChatters(chatters || {});\n    return fetchJsonp(`https://tmi.twitch.tv/group/user/${channel.toLowerCase()}/chatters`).then(res => {\n      return res.json();\n    }).then((json) => {\n      return json.data.chatters;\n    });\n  }, {\n    enabled: channel && channel !== '',\n    refetchInterval: REFRESH_INTERVAL_IN_MILLIS,\n  })\n\n  const toggleAutoRefresh = () => {\n    setAutoRefreshEnabled(!autoRefreshEnabled);\n  }\n\n  const onTwitchChannelChange = (event) => {\n    setChannel(event.target.value);\n  }\n\n  const renderListSection = ({key, display}) => {\n    if (!chatters) {\n      return null;\n    }\n\n    const inSection = chatters[key] || [];\n    if (inSection.length === 0) {\n      return null;\n    }\n\n    const lastInSection = lastChatters[key] || [];\n    const lastInSectionMap = lastInSection.reduce((dictionary, account) => {\n      return {...dictionary,\n        [account]: account\n      };\n    }, {});\n\n    inSection.sort(lexographicSort);\n\n    const listItems = inSection.map((account) => {\n      const isNew = !lastInSectionMap[account];\n\n      return (\n        <ListItem>\n          {\n            isNew && (\n              <ListItemIcon>\n                <FiberNewIcon />\n              </ListItemIcon>\n            )\n          }\n          <ListItemText\n            key={account}\n            primary={account}\n          />\n        </ListItem>\n      );\n    });\n    \n    return [\n      (<ListSubheader>{display}</ListSubheader>),\n      ...listItems\n    ]\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"TwitchChannel\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Twitch Dashboard\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid\n          container\n          alignItems=\"center\"\n          justify=\"center\"\n          spacing={1}\n          style={{marginTop: \"10px\", padding: \"10px\"}}\n        >\n          <Grid item xs={12}>\n            <TextField \n              fullWidth \n              label=\"Twitch Channel\" \n              onBlur={onTwitchChannelChange}\n              value={channel} \n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}><Divider /></Grid>\n          <Grid item xs={8}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={autoRefreshEnabled}\n                  disabled={!channel}\n                  onChange={toggleAutoRefresh}\n                  name=\"autoRefresh\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Auto refresh enabled\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Button\n              disabled={!channel}\n              onClick={refetch}\n              variant=\"contained\"\n              color=\"default\"\n              startIcon={<RefreshIcon />}\n            >\n              Refresh Now\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">\n              Channel Members\n            </Typography>\n            <div>\n              <List dense>\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['chatters'])}\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['vips'])}\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['broadcaster'])}\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['moderators'])}\n              </List>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}