{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CHAT_SECTIONS_TO_SHOW","key","display","lexographicSort","a","b","localeCompare","App","useState","channel","setChannel","workingChannel","setWorkingChannel","lastChatters","setLastChatters","autoRefreshEnabled","setAutoRefreshEnabled","useQuery","data","chatters","fetchJsonp","toLowerCase","then","res","json","console","log","enabled","refetchInterval","status","refetch","error","mapToListItem","account","isNew","ListItem","ListItemIcon","ListItemText","primary","renderListSection","inSection","length","lastInSectionMap","reduce","dictionary","partitions","newViewers","currentViewers","sort","newViewersMapped","map","currentViewersMapped","ListSubheader","style","backgroundColor","count","chatter_count","className","AppBar","position","Toolbar","Typography","variant","Grid","container","alignItems","justify","spacing","marginTop","padding","item","xs","TextField","fullWidth","label","onBlur","onChange","event","target","value","Divider","FormControlLabel","control","Switch","checked","disabled","name","color","justifyContent","Button","onClick","startIcon","List","dense","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ubAUMA,G,MAKQ,CACVC,IAAK,aACLC,QAAS,eAPPF,EASE,CACJC,IAAK,OACLC,QAAS,QAXPF,EAaK,CACPC,IAAK,UACLC,QAAS,WAIPC,EAAkB,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,IA4KnCE,MA1Kf,WAAgB,IAAD,EACiBC,mBAAS,iBAD1B,mBACNC,EADM,KACGC,EADH,OAEgCF,mBAAS,iBAFzC,mBAELG,EAFK,KAEWC,EAFX,OAG6BJ,mBAAS,IAHtC,mBAGLK,EAHK,KAGSC,EAHT,OAIuCN,oBAAS,GAJhD,mBAINO,EAJM,KAIcC,EAJd,OAM4BC,YAAS,CAAC,WAAYR,IAAU,WAEvE,OADAK,EAAgBI,EAAOA,EAAKC,SAAW,IAChCC,IAAW,oCAAD,OAAqCX,EAAQY,cAA7C,cAAuEC,MAAK,SAAAC,GAC3F,OAAOA,EAAIC,UACVF,MAAK,SAACE,GAEP,OADAC,QAAQC,IAAI,OAAQF,GACbA,EAAKN,UAEb,CACDS,QAASlB,GAAuB,KAAZA,EACpBmB,gBAvC+B,MA6BjBV,GANH,EAMLW,OANK,EAMGX,MAAaY,GANhB,EAMSC,MANT,EAMgBD,SAyBvBE,EAAgB,SAACC,EAASC,GAC9B,OACE,eAACC,EAAA,EAAD,WAEMD,GACE,cAACE,EAAA,EAAD,UACE,cAAC,IAAD,MAIN,cAACC,EAAA,EAAD,CACEC,QAASL,MATAA,IAebM,EAAoB,SAAC,GAAoB,IAAnBtC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,QAC/B,IAAKgB,IAASA,EAAKC,SACjB,OAAO,KAGT,IAAMqB,EAAYtB,EAAKC,SAASlB,IAAQ,GACxC,GAAyB,IAArBuC,EAAUC,OACZ,OAAO,KAGT,IACMC,GADgB7B,EAAaZ,IAAQ,IACJ0C,QAAO,SAACC,EAAYX,GACzD,OAAO,2BAAIW,GAAX,kBACGX,EAAUA,MAEZ,IAfyC,EAiBPO,EAAUG,QAAO,SAACE,EAAYZ,GAGjE,OAFeS,EAAiBT,GAGvB,2BACFY,GADL,IAEEC,WAAW,GAAD,mBAAMD,EAAWC,YAAjB,CAA6Bb,MAGlC,2BACFY,GADL,IAEEE,eAAe,GAAD,mBAAMF,EAAWE,gBAAjB,CAAiCd,QAGlD,CACDa,WAAY,GACZC,eAAgB,KAhBXD,EAjBqC,EAiBrCA,WAAYC,EAjByB,EAiBzBA,eAmBnBD,EAAWE,KAAK7C,GAChB4C,EAAeC,KAAK7C,GAEpB,IAAM8C,EAAmBH,EAAWI,KAAI,SAACjB,GAAD,OAAaD,EAAcC,GAAS,MACtEkB,EAAuBJ,EAAeG,KAAI,SAACjB,GAAD,OAAaD,EAAcC,GAAS,MAEpF,MAAM,CACH,cAACmB,EAAA,EAAD,CAA6BC,MAAO,CAACC,gBAAiB,SAAtD,SAAiEpD,GAA7CA,IADvB,mBAEK+C,GAFL,YAGKE,KAIDI,EAAQrC,EAAOA,EAAKsC,cAAgB,IAE1C,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,kCAKJ,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,WAAW,SACXC,QAAQ,SACRC,QAAS,EACTd,MAAO,CAACe,UAAW,OAAQC,QAAS,QALtC,UAOE,cAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAM,iBACNC,OArGgB,WAC1BjE,EAAWC,IAqGDiE,SA9FkB,SAACC,GAC7BjE,EAAkBiE,EAAMC,OAAOC,QA8FrBA,MAAOpE,EACPmD,QAAQ,eAGZ,cAACC,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAf,SAAmB,cAACS,EAAA,EAAD,MACnB,cAACjB,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,SACE,cAACU,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEC,QAASrE,EACTsE,UAAW5E,EACXmE,SA9GU,WACxB5D,GAAuBD,IA8GTuE,KAAK,cACLC,MAAM,YAGVb,MAAM,2BAGV,cAACX,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAGlB,MAAO,CAACnD,QAAS,OAAQsF,eAAgB,YAA3D,SACE,cAACC,EAAA,EAAD,CACEJ,UAAW5E,EACXiF,QAAS5D,EACTgC,QAAQ,YACRyB,MAAM,UACNI,UAAW,cAAC,IAAD,IALb,2BAUF,eAAC5B,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAf,UACE,eAACV,EAAA,EAAD,CAAYC,QAAQ,KAApB,8BACoBP,EADpB,OAGA,8BACE,eAACqC,EAAA,EAAD,CAAMC,OAAK,EAAX,UACGtD,EAAkBvC,GAClBuC,EAAkBvC,GAClBuC,EAAkBvC,oBCnLpB8F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1E,MAAK,YAAkD,IAA/C2E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2c89c36e.chunk.js","sourcesContent":["import { AppBar, Button, Divider, FormControlLabel, Grid, List, ListItem, ListItemIcon, ListItemText, ListSubheader, Switch, TextField, Toolbar, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport fetchJsonp from 'fetch-jsonp';\nimport './App.css';\n\nconst REFRESH_INTERVAL_IN_MILLIS = 20 * 1000;\n\nconst CHAT_SECTIONS_TO_SHOW = {\n  broadcaster: {\n    key: \"broadcaster\",\n    display: \"Broadcaster\"\n  },\n  moderators: {\n    key: \"moderators\",\n    display: \"Moderators\"\n  },\n  vips: {\n    key: \"vips\",\n    display: \"VIPs\"\n  }, \n  viewers: {\n    key: \"viewers\", \n    display: \"Viewers\"\n  }\n};\n\nconst lexographicSort = (a, b) => a.localeCompare(b);\n  \nfunction App() {\n  const [channel, setChannel] = useState('LindseyRooney'); \n  const [ workingChannel, setWorkingChannel] = useState('LindseyRooney');\n  const [ lastChatters, setLastChatters ] = useState({}); \n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);\n  \n  const { status, data, error, refetch } = useQuery(['chatters', channel], () => {\n    setLastChatters(data ? data.chatters : {});\n    return fetchJsonp(`https://tmi.twitch.tv/group/user/${channel.toLowerCase()}/chatters`).then(res => {\n      return res.json();\n    }).then((json) => {\n      console.log('JSON', json);\n      return json.data;\n    });\n  }, {\n    enabled: channel && channel !== '',\n    refetchInterval: REFRESH_INTERVAL_IN_MILLIS,\n  });\n\n  const commitChannelChange = () => {\n    setChannel(workingChannel);\n  }\n\n  const toggleAutoRefresh = () => {\n    setAutoRefreshEnabled(!autoRefreshEnabled);\n  }\n\n  const onTwitchChannelChange = (event) => {\n    setWorkingChannel(event.target.value);\n  }\n\n  const mapToListItem = (account, isNew) => {\n    return (\n      <ListItem key={account}>\n          {\n            isNew && (\n              <ListItemIcon>\n                <FiberNewIcon />\n              </ListItemIcon>\n            )\n          }\n          <ListItemText\n            primary={account}\n          />\n      </ListItem>\n    );\n  }\n\n  const renderListSection = ({key, display}) => {\n    if (!data || !data.chatters) {\n      return null;\n    }\n\n    const inSection = data.chatters[key] || [];\n    if (inSection.length === 0) {\n      return null;\n    }\n\n    const lastInSection = lastChatters[key] || [];\n    const lastInSectionMap = lastInSection.reduce((dictionary, account) => {\n      return {...dictionary,\n        [account]: account\n      };\n    }, {});\n\n    const {newViewers, currentViewers} = inSection.reduce((partitions, account) => {\n      const isNew = !lastInSectionMap[account];\n\n      if (isNew) {\n        return {\n          ...partitions,\n          newViewers: [...partitions.newViewers, account]\n        }\n      } else {\n        return {\n          ...partitions,\n          currentViewers: [...partitions.currentViewers, account]\n        }\n      }\n    }, {\n      newViewers: [],\n      currentViewers: []\n    });\n\n    newViewers.sort(lexographicSort);\n    currentViewers.sort(lexographicSort);\n\n    const newViewersMapped = newViewers.map((account) => mapToListItem(account, true));\n    const currentViewersMapped = currentViewers.map((account) => mapToListItem(account, false));\n\n    return [\n      (<ListSubheader key={display} style={{backgroundColor: \"white\"}}>{display}</ListSubheader>),\n      ...newViewersMapped,\n      ...currentViewersMapped\n    ]\n  }\n\n  const count = data ? data.chatter_count : \"?\"\n\n  return (\n    <div className=\"App\">\n      <div className=\"TwitchChannel\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Twitch Dashboard\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid\n          container\n          alignItems=\"center\"\n          justify=\"center\"\n          spacing={1}\n          style={{marginTop: \"10px\", padding: \"10px\"}}\n        >\n          <Grid item xs={12}>\n            <TextField \n              fullWidth \n              label=\"Twitch Channel\" \n              onBlur={commitChannelChange}\n              onChange={onTwitchChannelChange}\n              value={workingChannel} \n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={12}><Divider /></Grid>\n          <Grid item xs={8}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={autoRefreshEnabled}\n                  disabled={!channel}\n                  onChange={toggleAutoRefresh}\n                  name=\"autoRefresh\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Auto refresh enabled\"\n            />\n          </Grid>\n          <Grid item xs={4} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n            <Button\n              disabled={!channel}\n              onClick={refetch}\n              variant=\"contained\"\n              color=\"default\"\n              startIcon={<RefreshIcon />}\n            >\n              Refresh Now\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">\n              Channel Members ({count})\n            </Typography>\n            <div>\n              <List dense>\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['vips'])}\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['viewers'])}\n                {renderListSection(CHAT_SECTIONS_TO_SHOW['moderators'])}\n              </List>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}